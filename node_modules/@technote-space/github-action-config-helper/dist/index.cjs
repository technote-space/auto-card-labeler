'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var path = require('path');
var jsYaml = require('js-yaml');

const NOT_FOUND_STATUS = 404;

const isYaml = (filename) => ['yaml', 'yml'].includes(String(filename.split('.').pop()));
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const parseYamlConfig = (content) => {
    try {
        const config = jsYaml.load(content);
        if (!config || typeof config !== 'object') {
            return {};
        }
        return config;
    }
    catch (error) {
        console.error(error);
        return {};
    }
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const parseJsonConfig = (content) => {
    try {
        return JSON.parse(content);
    }
    catch (error) {
        console.error(error);
        return {};
    }
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const parseConfig = (content, filename) => undefined === filename || isYaml(filename) ?
    parseYamlConfig(Buffer.from(content, 'base64').toString()) :
    parseJsonConfig(Buffer.from(content, 'base64').toString());

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getConfig = async (fileName, octokit, context, options = {}) => {
    const { configPath = '.github', ref } = options;
    try {
        const params = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            path: path.join(configPath, fileName),
        };
        if (ref) {
            params.ref = ref;
        }
        return parseConfig((await octokit.rest.repos.getContent(params)).data['content']);
    }
    catch (error) { // eslint-disable-line @typescript-eslint/no-explicit-any
        if (error.status && NOT_FOUND_STATUS === error.status) {
            return false;
        }
        throw error;
    }
};

exports.getConfig = getConfig;
exports.parseConfig = parseConfig;
